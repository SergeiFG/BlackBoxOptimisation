# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import RtoApi_pb2 as RtoApi__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in RtoApi_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RtoServiceStub(object):
    """Сервис обработки данных RTO
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServiceStatus = channel.unary_unary(
                '/Grpc.RtoApi.RtoService/GetServiceStatus',
                request_serializer=RtoApi__pb2.ArgRequest.SerializeToString,
                response_deserializer=RtoApi__pb2.ServiceStatus.FromString,
                _registered_method=True)
        self.StartOptimizeSession = channel.unary_unary(
                '/Grpc.RtoApi.RtoService/StartOptimizeSession',
                request_serializer=RtoApi__pb2.StartRequest.SerializeToString,
                response_deserializer=RtoApi__pb2.StartResponse.FromString,
                _registered_method=True)
        self.OptimizeIteration = channel.unary_unary(
                '/Grpc.RtoApi.RtoService/OptimizeIteration',
                request_serializer=RtoApi__pb2.OptimizeIterationRequest.SerializeToString,
                response_deserializer=RtoApi__pb2.OptimizeIterationResponse.FromString,
                _registered_method=True)
        self.Pause = channel.unary_unary(
                '/Grpc.RtoApi.RtoService/Pause',
                request_serializer=RtoApi__pb2.PauseRequest.SerializeToString,
                response_deserializer=RtoApi__pb2.PauseResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/Grpc.RtoApi.RtoService/Stop',
                request_serializer=RtoApi__pb2.StopRequest.SerializeToString,
                response_deserializer=RtoApi__pb2.StopResponse.FromString,
                _registered_method=True)


class RtoServiceServicer(object):
    """Сервис обработки данных RTO
    """

    def GetServiceStatus(self, request, context):
        """Функция получения статуса сервиса
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartOptimizeSession(self, request, context):
        """Создает новую сессию оптимизации
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeIteration(self, request, context):
        """Итерация одной сессии оптимизации
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pause(self, request, context):
        """Ставит оптимизацию на паузу
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Останавливает и удаляет сессию
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RtoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=RtoApi__pb2.ArgRequest.FromString,
                    response_serializer=RtoApi__pb2.ServiceStatus.SerializeToString,
            ),
            'StartOptimizeSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartOptimizeSession,
                    request_deserializer=RtoApi__pb2.StartRequest.FromString,
                    response_serializer=RtoApi__pb2.StartResponse.SerializeToString,
            ),
            'OptimizeIteration': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeIteration,
                    request_deserializer=RtoApi__pb2.OptimizeIterationRequest.FromString,
                    response_serializer=RtoApi__pb2.OptimizeIterationResponse.SerializeToString,
            ),
            'Pause': grpc.unary_unary_rpc_method_handler(
                    servicer.Pause,
                    request_deserializer=RtoApi__pb2.PauseRequest.FromString,
                    response_serializer=RtoApi__pb2.PauseResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=RtoApi__pb2.StopRequest.FromString,
                    response_serializer=RtoApi__pb2.StopResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Grpc.RtoApi.RtoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Grpc.RtoApi.RtoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RtoService(object):
    """Сервис обработки данных RTO
    """

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Grpc.RtoApi.RtoService/GetServiceStatus',
            RtoApi__pb2.ArgRequest.SerializeToString,
            RtoApi__pb2.ServiceStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartOptimizeSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Grpc.RtoApi.RtoService/StartOptimizeSession',
            RtoApi__pb2.StartRequest.SerializeToString,
            RtoApi__pb2.StartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OptimizeIteration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Grpc.RtoApi.RtoService/OptimizeIteration',
            RtoApi__pb2.OptimizeIterationRequest.SerializeToString,
            RtoApi__pb2.OptimizeIterationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Pause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Grpc.RtoApi.RtoService/Pause',
            RtoApi__pb2.PauseRequest.SerializeToString,
            RtoApi__pb2.PauseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Grpc.RtoApi.RtoService/Stop',
            RtoApi__pb2.StopRequest.SerializeToString,
            RtoApi__pb2.StopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
